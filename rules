#!/usr/bin/make -f

# removes noautodbgsym from DEB_BUILD_OPTIONS
DEB_BUILD_OPTIONS = parallel=4
DEB_BUILD_ARCH := $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_BUILD_MULTIARCH := $(shell dpkg-architecture -qDEB_BUILD_MULTIARCH)

CONFFLAGS = --libdir=/usr/lib --with-world --disable-libdirversion --enable-shared

CFLAGS   := $(shell dpkg-buildflags --get CFLAGS)
CPPFLAGS := $(shell dpkg-buildflags --get CPPFLAGS) -fPIC $(shell pkg-config --cflags ncursesw)
LDFLAGS  := $(shell dpkg-buildflags --get LDFLAGS) $(shell dpkg-buildflags --get CFLAGS)

# FIXME implement a proper fix
ifeq ($(shell dpkg-architecture -qDEB_BUILD_ARCH_OS),hurd)
CPPFLAGS += -DMAXPATHLEN=1024
endif

export CFLAGS CPPFLAGS LDFLAGS

# List of architectures where -java package should be built.
JAVA_ARCHS = $(shell grep-dctrl -PX swi-prolog-java -nsArchitecture debian/control)

ifeq ($(filter $(DEB_BUILD_ARCH),$(JAVA_ARCHS)),)
    DISABLE_PKGS=jpl
else
    JAVA_PACKAGES = jpl
endif

PLBASE := /usr/lib/swi-prolog/
JNIDIR := /usr/lib/$(DEB_BUILD_MULTIARCH)/jni

NOX_PACKAGES = clib cpp table sgml RDF semweb http chr clpqr nlp ssl pldoc plunit zlib protobufs PDT libedit readline utf8proc archive pengines cql pcre yaml
X_PACKAGES = xpce
ODBC_PACKAGES = odbc
BDB_PACKAGES = bdb

# Add here all packages that are not installed into deb packages
DISABLE_PKGS += windows
export DISABLE_PKGS

ifeq ($(shell dpkg-architecture -qDEB_BUILD_ARCH_OS),linux)
    NOX_PACKAGES += tipc
else
    DISABLE_PKGS += tipc
endif

# install_component component deb_pkg
define install_component
	DESTDIR=$(CURDIR)/debian/$(2) \
	cmake -DCMAKE_INSTALL_COMPONENT=$(1) \
	      -P cmake_install.cmake
endef

# install_components plog_pkg_list deb_pkg
define install_components
	$(foreach component,$(1),$(call install_package,$(component),$(2)))
endef

%:
	dh $@ --with=autoreconf --parallel

override_dh_auto_configure:
	mkdir build && cd build && cmake ..

override_dh_auto_build:
	cd build && $(MAKE) < /dev/null

override_dh_auto_clean:
	rm -rf build

override_dh_auto_install:
	$(call install_components,$(NOX_COMPONENTS),swi-prolog-nox)
	$(call install_components,$(X_COMPONENTS),swi-prolog-x)
	$(call install_components,$(JAVA_COMPONENTS),swi-prolog-java)
	$(call install_components,$(ODBC_COMPONENTS),swi-prolog-odbc)
	$(call install_components,$(BDB_COMPONENTS),swi-prolog-bdb)

	# Install the package index file
	# install -m 644 $(CURDIR)/packages/index.html $(CURDIR)/debian/swi-prolog-nox/$(PLBASE)/packages

	# This file is generated by swi-prolog-nox postinst (updated by triggers)
	# rm debian/swi-prolog-nox/$(PLBASE)/library/INDEX.pl

	# Generate xpce's autoload index
	# echo "make_library_index('$(CURDIR)/debian/swi-prolog-x/$(PLBASE)/xpce/prolog/lib/')." | $(CURDIR)/src/swipl.sh

	# Remove empty directories
	find debian/ -depth -type d -empty -exec rm -rfv {} \;

	# mv $(CURDIR)/debian/swi-prolog-nox/$(PLBASE)/lib/$(DEB_BUILD_ARCH)/libswipl.* $(CURDIR)/debian/swi-prolog-nox/usr/lib/

	# Link libjpl.so from the JNI directory so java can load it without LD_LIBRARY_PATH
	# mkdir -p $(CURDIR)/debian/swi-prolog-java/$(JNIDIR)
	# ln -s $(PLBASE)/lib/$(DEB_BUILD_ARCH)/libjpl.so \
	#       $(CURDIR)/debian/swi-prolog-java/$(JNIDIR)/

override_dh_install:

override_dh_builddeb:
	dh_builddeb -- -Zxz

# tell the tests NOT to try to access http://www.swi-prolog.org.  This
# is used in some of the HTTP tests
USE_PUBLIC_NETWORK_TESTS=false
export USE_PUBLIC_NETWORK_TESTS

override_dh_auto_test:
	cd build && ctest -j 4

.PHONY: override_dh_auto_configure override_dh_auto_build override_dh_auto_clean override_dh_auto_install
.PHONY: override_dh_install override_dh_builddeb override_dh_auto_test
